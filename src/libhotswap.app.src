{application, libhotswap,
    [
        {description, "Utility Library to aid in Self-Modifying Code."},
        {vsn,"0.1"},
        {registered, []},
        {applications, []},
        {mod, {libhotswap_app,[]}},
        {env, [
            % The cache directory the server should save to. This directory 
            % should be outside the Erlang Code Path (e.g. code:get_path/0).
            {cache_dir, "~/.libhotswap_cache"},

            % Persist on shutdown, i.e. don't delete cache on libhotswap:stop/n?
            {persist_on_shutdown, true},

            % Return all overloaded modules to their original state on
            % shutdown. Original State means libhotswap will relinquish
            % control back to the Code Server which checks the Erlang path
            % and reloads the modules from there (rather than the cache).
            {unload_on_shutdown, false},

            % Overload modules on startup, i.e. reload for each module in
            % cache_dir on libhotswap:start_server/0?
            {reload_on_startup, true},

            % Number of historical copies to persist for rollback? This acts
            % like a stack, where the bottom is trimmed as more are added,
            % and to rollback more than once has the effect of trimming the top.
            {rollback_length, 5},

            % Soft or hard module purge when reloading? See code:purge/1 for
            % more details on difference.
            {use_hard_purge, false},

            % Allow Sticky Directory overriding (namely stdlib). This lets you
            % modify primary Erlang modules. Useful for patching for mockups and
            % debugging, not useful for production purposes.
            {override_sticky, false}
        ]}
    ]
}.
